// tslint:disable: no-redundant-jsdoc
export class KatexOptions {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2F0ZXgtb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tYXJrZG93bi8iLCJzb3VyY2VzIjpbInNyYy9rYXRleC1vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFDQUFxQztBQUNyQyxNQUFNLE9BQU8sWUFBWTtDQThFeEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTogbm8tcmVkdW5kYW50LWpzZG9jXHJcbmV4cG9ydCBjbGFzcyBLYXRleE9wdGlvbnMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBgdHJ1ZWAsIG1hdGggd2lsbCBiZSByZW5kZXJlZCBpbiBkaXNwbGF5IG1vZGVcclxuICAgICAqIChtYXRoIGluIGRpc3BsYXkgc3R5bGUgYW5kIGNlbnRlciBtYXRoIG9uIHBhZ2UpXHJcbiAgICAgKlxyXG4gICAgICogSWYgYGZhbHNlYCwgbWF0aCB3aWxsIGJlIHJlbmRlcmVkIGluIGlubGluZSBtb2RlXHJcbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxyXG4gICAgICovXHJcbiAgICBkaXNwbGF5TW9kZT86IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIElmIGB0cnVlYCwgS2FUZVggd2lsbCB0aHJvdyBhIGBQYXJzZUVycm9yYCB3aGVuXHJcbiAgICAgKiBpdCBlbmNvdW50ZXJzIGFuIHVuc3VwcG9ydGVkIGNvbW1hbmQgb3IgaW52YWxpZCBMYVRleFxyXG4gICAgICpcclxuICAgICAqIElmIGBmYWxzZWAsIEthVGVYIHdpbGwgcmVuZGVyIHVuc3VwcG9ydGVkIGNvbW1hbmRzIGFzXHJcbiAgICAgKiB0ZXh0LCBhbmQgcmVuZGVyIGludmFsaWQgTGFUZVggYXMgaXRzIHNvdXJjZSBjb2RlIHdpdGhcclxuICAgICAqIGhvdmVyIHRleHQgZ2l2aW5nIHRoZSBlcnJvciwgaW4gY29sb3IgZ2l2ZW4gYnkgZXJyb3JDb2xvclxyXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxyXG4gICAgICovXHJcbiAgICB0aHJvd09uRXJyb3I/OiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIENvbG9yIHN0cmluZyBnaXZlbiBpbiBmb3JtYXQgYCNYWFhgIG9yIGAjWFhYWFhYYFxyXG4gICAgICovXHJcbiAgICBlcnJvckNvbG9yPzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIGNvbGxlY3Rpb24gb2YgY3VzdG9tIG1hY3Jvcy5cclxuICAgICAqXHJcbiAgICAgKiBTZWUgYHNyYy9tYWNyb3MuanNgIGZvciBpdHMgdXNhZ2VcclxuICAgICAqL1xyXG4gICAgbWFjcm9zPzogYW55O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBgdHJ1ZWAsIGBcXGNvbG9yYCB3aWxsIHdvcmsgbGlrZSBMYVRlWCdzIGBcXHRleHRjb2xvcmBcclxuICAgICAqIGFuZCB0YWtlcyAyIGFyZ3VtZW50c1xyXG4gICAgICpcclxuICAgICAqIElmIGBmYWxzZWAsIGBcXGNvbG9yYCB3aWxsIHdvcmsgbGlrZSBMYVRlWCdzIGBcXGNvbG9yYFxyXG4gICAgICogYW5kIHRha2VzIDEgYXJndW1lbnRcclxuICAgICAqXHJcbiAgICAgKiBJbiBib3RoIGNhc2VzLCBgXFx0ZXh0Y29sb3JgIHdvcmtzIGFzIGluIExhVGVYXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgZmFsc2VcclxuICAgICAqL1xyXG4gICAgY29sb3JJc1RleHRDb2xvcj86IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEFsbCB1c2VyLXNwZWNpZmllZCBzaXplcyB3aWxsIGJlIGNhcGVkIHRvIGBtYXhTaXplYCBlbXNcclxuICAgICAqXHJcbiAgICAgKiBJZiBzZXQgdG8gSW5maW5pdHksIHVzZXJzIGNhbiBtYWtlIGVsZW1lbnRzIGFuZCBzcGFjZVxyXG4gICAgICogYXJiaXRyYXJpbHkgbGFyZ2VcclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBJbmZpbml0eVxyXG4gICAgICovXHJcbiAgICBtYXhTaXplPzogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBMaW1pdCB0aGUgbnVtYmVyIG9mIG1hY3JvIGV4cGFuc2lvbnMgdG8gc3BlY2lmaWVkIG51bWJlclxyXG4gICAgICpcclxuICAgICAqIElmIHNldCB0byBgSW5maW5pdHlgLCBtYXJjbyBleHBhbmRlciB3aWxsIHRyeSB0byBmdWxseSBleHBhbmRcclxuICAgICAqIGFzIGluIExhVGV4XHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgMTAwMFxyXG4gICAgICovXHJcbiAgICBtYXhFeHBhbmQ/OiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIEFsbG93ZWQgcHJvdG9jb2xzIGluIGBcXGhyZWZgXHJcbiAgICAgKlxyXG4gICAgICogVXNlIGBfcmVsYXRpdmVgIHRvIGFsbG93IHJlbGF0aXZlIHVybHNcclxuICAgICAqXHJcbiAgICAgKiBVc2UgYCpgIHRvIGFsbG93IGFsbCBwcm90b2NvbHNcclxuICAgICAqL1xyXG4gICAgYWxsb3dlZFByb3RvY29scz86IHN0cmluZ1tdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBgZmFsc2VgIG9yIGBcImlnbm9yZVwiYCwgYWxsb3cgZmVhdHVyZXMgdGhhdCBtYWtlXHJcbiAgICAgKiB3cml0aW5nIGluIExhVGV4IGNvbnZlbmllbnQgYnV0IG5vdCBzdXBwb3J0ZWQgYnkgTGFUZXhcclxuICAgICAqXHJcbiAgICAgKiBJZiBgdHJ1ZWAgb3IgYFwiZXJyb3JcImAsIHRocm93IGFuIGVycm9yIGZvciBzdWNoIHRyYW5zZ3Jlc3Npb25zXHJcbiAgICAgKlxyXG4gICAgICogSWYgYFwid2FyblwiYCwgd2FybiBhYm91dCBiZWhhdmlvciB2aWEgYGNvbnNvbGUud2FybmBcclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBcIndhcm5cIlxyXG4gICAgICovXHJcbiAgICBzdHJpY3Q/OiBib29sZWFuIHwgc3RyaW5nIHwgRnVuY3Rpb247XHJcbn1cclxuIl19