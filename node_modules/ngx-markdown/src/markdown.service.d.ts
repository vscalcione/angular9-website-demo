/// <reference types="marked" />
import { HttpClient } from '@angular/common/http';
import { InjectionToken, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import { KatexOptions } from './katex-options';
import { MarkedOptions } from './marked-options';
import { MarkedRenderer } from './marked-renderer';
import * as ɵngcc0 from '@angular/core';
export declare const errorJoyPixelsNotLoaded = "[ngx-markdown] When using the `emoji` attribute you *have to* include Emoji-Toolkit files to `angular.json` or use imports. See README for more information";
export declare const errorKatexNotLoaded = "[ngx-markdown] When using the `katex` attribute you *have to* include KaTeX files to `angular.json` or use imports. See README for more information";
export declare const errorSrcWithoutHttpClient = "[ngx-markdown] When using the `src` attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information";
export declare const SECURITY_CONTEXT: InjectionToken<SecurityContext>;
export declare class MarkdownService {
    private platform;
    private securityContext;
    private http;
    private sanitizer;
    private readonly initialMarkedOptions;
    private _options;
    get options(): MarkedOptions;
    set options(value: MarkedOptions);
    get renderer(): MarkedRenderer;
    set renderer(value: MarkedRenderer);
    constructor(platform: Object, securityContext: SecurityContext, http: HttpClient, options: MarkedOptions, sanitizer: DomSanitizer);
    compile(markdown: string, decodeHtml?: boolean, emojify?: boolean, markedOptions?: MarkedOptions): string;
    getSource(src: string): Observable<string>;
    highlight(element?: Element | Document): void;
    renderKatex(html: string, options?: KatexOptions): string;
    private decodeHtml;
    private handleExtension;
    private renderEmoji;
    private trimIndentation;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MarkdownService, [null, null, { optional: true; }, { optional: true; }, null]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MarkdownService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24uc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJtYXJrZG93bi5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJtYXJrZWRcIiAvPlxyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgU2VjdXJpdHlDb250ZXh0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEthdGV4T3B0aW9ucyB9IGZyb20gJy4va2F0ZXgtb3B0aW9ucyc7XHJcbmltcG9ydCB7IE1hcmtlZE9wdGlvbnMgfSBmcm9tICcuL21hcmtlZC1vcHRpb25zJztcclxuaW1wb3J0IHsgTWFya2VkUmVuZGVyZXIgfSBmcm9tICcuL21hcmtlZC1yZW5kZXJlcic7XHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGVycm9ySm95UGl4ZWxzTm90TG9hZGVkID0gXCJbbmd4LW1hcmtkb3duXSBXaGVuIHVzaW5nIHRoZSBgZW1vamlgIGF0dHJpYnV0ZSB5b3UgKmhhdmUgdG8qIGluY2x1ZGUgRW1vamktVG9vbGtpdCBmaWxlcyB0byBgYW5ndWxhci5qc29uYCBvciB1c2UgaW1wb3J0cy4gU2VlIFJFQURNRSBmb3IgbW9yZSBpbmZvcm1hdGlvblwiO1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBlcnJvckthdGV4Tm90TG9hZGVkID0gXCJbbmd4LW1hcmtkb3duXSBXaGVuIHVzaW5nIHRoZSBga2F0ZXhgIGF0dHJpYnV0ZSB5b3UgKmhhdmUgdG8qIGluY2x1ZGUgS2FUZVggZmlsZXMgdG8gYGFuZ3VsYXIuanNvbmAgb3IgdXNlIGltcG9ydHMuIFNlZSBSRUFETUUgZm9yIG1vcmUgaW5mb3JtYXRpb25cIjtcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgZXJyb3JTcmNXaXRob3V0SHR0cENsaWVudCA9IFwiW25neC1tYXJrZG93bl0gV2hlbiB1c2luZyB0aGUgYHNyY2AgYXR0cmlidXRlIHlvdSAqaGF2ZSB0byogcGFzcyB0aGUgYEh0dHBDbGllbnRgIGFzIGEgcGFyYW1ldGVyIG9mIHRoZSBgZm9yUm9vdGAgbWV0aG9kLiBTZWUgUkVBRE1FIGZvciBtb3JlIGluZm9ybWF0aW9uXCI7XHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFNFQ1VSSVRZX0NPTlRFWFQ6IEluamVjdGlvblRva2VuPFNlY3VyaXR5Q29udGV4dD47XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1hcmtkb3duU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHBsYXRmb3JtO1xyXG4gICAgcHJpdmF0ZSBzZWN1cml0eUNvbnRleHQ7XHJcbiAgICBwcml2YXRlIGh0dHA7XHJcbiAgICBwcml2YXRlIHNhbml0aXplcjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgaW5pdGlhbE1hcmtlZE9wdGlvbnM7XHJcbiAgICBwcml2YXRlIF9vcHRpb25zO1xyXG4gICAgZ2V0IG9wdGlvbnMoKTogTWFya2VkT3B0aW9ucztcclxuICAgIHNldCBvcHRpb25zKHZhbHVlOiBNYXJrZWRPcHRpb25zKTtcclxuICAgIGdldCByZW5kZXJlcigpOiBNYXJrZWRSZW5kZXJlcjtcclxuICAgIHNldCByZW5kZXJlcih2YWx1ZTogTWFya2VkUmVuZGVyZXIpO1xyXG4gICAgY29uc3RydWN0b3IocGxhdGZvcm06IE9iamVjdCwgc2VjdXJpdHlDb250ZXh0OiBTZWN1cml0eUNvbnRleHQsIGh0dHA6IEh0dHBDbGllbnQsIG9wdGlvbnM6IE1hcmtlZE9wdGlvbnMsIHNhbml0aXplcjogRG9tU2FuaXRpemVyKTtcclxuICAgIGNvbXBpbGUobWFya2Rvd246IHN0cmluZywgZGVjb2RlSHRtbD86IGJvb2xlYW4sIGVtb2ppZnk/OiBib29sZWFuLCBtYXJrZWRPcHRpb25zPzogTWFya2VkT3B0aW9ucyk6IHN0cmluZztcclxuICAgIGdldFNvdXJjZShzcmM6IHN0cmluZyk6IE9ic2VydmFibGU8c3RyaW5nPjtcclxuICAgIGhpZ2hsaWdodChlbGVtZW50PzogRWxlbWVudCB8IERvY3VtZW50KTogdm9pZDtcclxuICAgIHJlbmRlckthdGV4KGh0bWw6IHN0cmluZywgb3B0aW9ucz86IEthdGV4T3B0aW9ucyk6IHN0cmluZztcclxuICAgIHByaXZhdGUgZGVjb2RlSHRtbDtcclxuICAgIHByaXZhdGUgaGFuZGxlRXh0ZW5zaW9uO1xyXG4gICAgcHJpdmF0ZSByZW5kZXJFbW9qaTtcclxuICAgIHByaXZhdGUgdHJpbUluZGVudGF0aW9uO1xyXG59XHJcbiJdfQ==