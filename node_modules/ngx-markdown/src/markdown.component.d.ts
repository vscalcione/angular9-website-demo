import { AfterViewInit, ElementRef, EventEmitter, OnChanges } from '@angular/core';
import { KatexOptions } from './katex-options';
import { MarkdownService } from './markdown.service';
import * as ɵngcc0 from '@angular/core';
export declare class MarkdownComponent implements OnChanges, AfterViewInit {
    element: ElementRef<HTMLElement>;
    markdownService: MarkdownService;
    protected static ngAcceptInputType_emoji: boolean | '';
    protected static ngAcceptInputType_katex: boolean | '';
    protected static ngAcceptInputType_lineHighlight: boolean | '';
    protected static ngAcceptInputType_lineNumbers: boolean | '';
    data: string;
    src: string;
    get emoji(): boolean;
    set emoji(value: boolean);
    get katex(): boolean;
    set katex(value: boolean);
    katexOptions: KatexOptions;
    get lineHighlight(): boolean;
    set lineHighlight(value: boolean);
    line: string | string[];
    lineOffset: number;
    get lineNumbers(): boolean;
    set lineNumbers(value: boolean);
    start: number;
    error: EventEmitter<string>;
    load: EventEmitter<string>;
    ready: EventEmitter<void>;
    private _emoji;
    private _katex;
    private _lineHighlight;
    private _lineNumbers;
    constructor(element: ElementRef<HTMLElement>, markdownService: MarkdownService);
    ngOnChanges(): void;
    ngAfterViewInit(): void;
    render(markdown: string, decodeHtml?: boolean): void;
    private coerceBooleanProperty;
    private handleData;
    private handleSrc;
    private handleTransclusion;
    private handlePlugins;
    private setPluginClass;
    private setPluginOptions;
    private toLispCase;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MarkdownComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MarkdownComponent, "markdown, [markdown]", never, { "emoji": "emoji"; "katex": "katex"; "lineHighlight": "lineHighlight"; "lineNumbers": "lineNumbers"; "data": "data"; "src": "src"; "katexOptions": "katexOptions"; "line": "line"; "lineOffset": "lineOffset"; "start": "start"; }, { "error": "error"; "load": "load"; "ready": "ready"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm1hcmtkb3duLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBLYXRleE9wdGlvbnMgfSBmcm9tICcuL2thdGV4LW9wdGlvbnMnO1xyXG5pbXBvcnQgeyBNYXJrZG93blNlcnZpY2UgfSBmcm9tICcuL21hcmtkb3duLnNlcnZpY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNYXJrZG93bkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcclxuICAgIG1hcmtkb3duU2VydmljZTogTWFya2Rvd25TZXJ2aWNlO1xyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9lbW9qaTogYm9vbGVhbiB8ICcnO1xyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9rYXRleDogYm9vbGVhbiB8ICcnO1xyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9saW5lSGlnaGxpZ2h0OiBib29sZWFuIHwgJyc7XHJcbiAgICBwcm90ZWN0ZWQgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX2xpbmVOdW1iZXJzOiBib29sZWFuIHwgJyc7XHJcbiAgICBkYXRhOiBzdHJpbmc7XHJcbiAgICBzcmM6IHN0cmluZztcclxuICAgIGdldCBlbW9qaSgpOiBib29sZWFuO1xyXG4gICAgc2V0IGVtb2ppKHZhbHVlOiBib29sZWFuKTtcclxuICAgIGdldCBrYXRleCgpOiBib29sZWFuO1xyXG4gICAgc2V0IGthdGV4KHZhbHVlOiBib29sZWFuKTtcclxuICAgIGthdGV4T3B0aW9uczogS2F0ZXhPcHRpb25zO1xyXG4gICAgZ2V0IGxpbmVIaWdobGlnaHQoKTogYm9vbGVhbjtcclxuICAgIHNldCBsaW5lSGlnaGxpZ2h0KHZhbHVlOiBib29sZWFuKTtcclxuICAgIGxpbmU6IHN0cmluZyB8IHN0cmluZ1tdO1xyXG4gICAgbGluZU9mZnNldDogbnVtYmVyO1xyXG4gICAgZ2V0IGxpbmVOdW1iZXJzKCk6IGJvb2xlYW47XHJcbiAgICBzZXQgbGluZU51bWJlcnModmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgc3RhcnQ6IG51bWJlcjtcclxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIGxvYWQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xyXG4gICAgcmVhZHk6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICAgIHByaXZhdGUgX2Vtb2ppO1xyXG4gICAgcHJpdmF0ZSBfa2F0ZXg7XHJcbiAgICBwcml2YXRlIF9saW5lSGlnaGxpZ2h0O1xyXG4gICAgcHJpdmF0ZSBfbGluZU51bWJlcnM7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiwgbWFya2Rvd25TZXJ2aWNlOiBNYXJrZG93blNlcnZpY2UpO1xyXG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgcmVuZGVyKG1hcmtkb3duOiBzdHJpbmcsIGRlY29kZUh0bWw/OiBib29sZWFuKTogdm9pZDtcclxuICAgIHByaXZhdGUgY29lcmNlQm9vbGVhblByb3BlcnR5O1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVEYXRhO1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVTcmM7XHJcbiAgICBwcml2YXRlIGhhbmRsZVRyYW5zY2x1c2lvbjtcclxuICAgIHByaXZhdGUgaGFuZGxlUGx1Z2lucztcclxuICAgIHByaXZhdGUgc2V0UGx1Z2luQ2xhc3M7XHJcbiAgICBwcml2YXRlIHNldFBsdWdpbk9wdGlvbnM7XHJcbiAgICBwcml2YXRlIHRvTGlzcENhc2U7XHJcbn1cclxuIl19